{"ast":null,"code":"//Cart.js\n\n/*import React, { useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { RestaurantContext } from \"../contexts/RestaurantContext\";\r\n\r\nconst Cart = () => {\r\n    const { totalPrice, emptyCart } = useContext(RestaurantContext);\r\n    const [isCheckingOut, setIsCheckingOut] = useState(false);\r\n\r\n    const generateOrderId = () => {\r\n        // Generate a unique order ID \r\n        // (you can use a library like uuid for a more robust solution)\r\n        return `${Math.floor(Math.random() * 1000)}`;\r\n    };\r\n\r\n    const handleCheckout = async () => {\r\n        try {\r\n            setIsCheckingOut(true);\r\n\r\n            const orderId = generateOrderId();\r\n\r\n            // Assuming you have a backend endpoint to handle the checkout\r\n            const response = await axios.post(\r\n                \"http://localhost:5000/previousOrders\",\r\n                {\r\n                    orderId,\r\n                    dateOfOrder: new Date(),\r\n                    amount: totalPrice,\r\n                }\r\n            );\r\n\r\n            console.log(response.data);\r\n            emptyCart();\r\n        } catch (error) {\r\n            console.error(\"Error during checkout:\", error.message);\r\n        } finally {\r\n            setIsCheckingOut(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"cart-container\">\r\n            <h2>Cart</h2>\r\n            <div className=\"cart-content\">\r\n                <span style={{ color: \"brown\" }}>Total Price: </span> $\r\n                {totalPrice}\r\n                <button onClick={handleCheckout} disabled={isCheckingOut}>\r\n                    {isCheckingOut ? \"Checking out...\" : \"Checkout\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n*/","map":{"version":3,"names":[],"sources":["E:/mern/food-del/client/src/components/Cart.js"],"sourcesContent":["//Cart.js\r\n\r\n/*import React, { useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { RestaurantContext } from \"../contexts/RestaurantContext\";\r\n\r\nconst Cart = () => {\r\n    const { totalPrice, emptyCart } = useContext(RestaurantContext);\r\n    const [isCheckingOut, setIsCheckingOut] = useState(false);\r\n\r\n    const generateOrderId = () => {\r\n        // Generate a unique order ID \r\n        // (you can use a library like uuid for a more robust solution)\r\n        return `${Math.floor(Math.random() * 1000)}`;\r\n    };\r\n\r\n    const handleCheckout = async () => {\r\n        try {\r\n            setIsCheckingOut(true);\r\n\r\n            const orderId = generateOrderId();\r\n\r\n            // Assuming you have a backend endpoint to handle the checkout\r\n            const response = await axios.post(\r\n                \"http://localhost:5000/previousOrders\",\r\n                {\r\n                    orderId,\r\n                    dateOfOrder: new Date(),\r\n                    amount: totalPrice,\r\n                }\r\n            );\r\n\r\n            console.log(response.data);\r\n            emptyCart();\r\n        } catch (error) {\r\n            console.error(\"Error during checkout:\", error.message);\r\n        } finally {\r\n            setIsCheckingOut(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"cart-container\">\r\n            <h2>Cart</h2>\r\n            <div className=\"cart-content\">\r\n                <span style={{ color: \"brown\" }}>Total Price: </span> $\r\n                {totalPrice}\r\n                <button onClick={handleCheckout} disabled={isCheckingOut}>\r\n                    {isCheckingOut ? \"Checking out...\" : \"Checkout\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n*/\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}