{"ast":null,"code":"var _jsxFileName = \"E:\\\\mern\\\\food-del\\\\client\\\\src\\\\contexts\\\\RestaurantContext.js\",\n  _s = $RefreshSig$();\n//RestaurantContext.js\n\n/*import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst RestaurantContext = createContext();\r\n\r\nconst RestaurantProvider = ({ children }) => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [selectedRestaurant, setSelectedRestaurant] = useState(null);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurants = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    \"http://localhost:5000/restaurants\"\r\n                );\r\n                setRestaurants(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching restaurants:\", error.message);\r\n            }\r\n        };\r\n\r\n        fetchRestaurants();\r\n    }, []);\r\n\r\n    const handleAddItems = (dish) => {\r\n        console.log(\"Dish:\", dish);\r\n\r\n        // Check if the dish already exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish already exists, update \r\n            // the quantity or any other logic\r\n            console.log(\"Dish already exists in the cart.\");\r\n            // Example: Increment the quantity\r\n            const updatedCartItems = [...cartItems];\r\n            updatedCartItems[existingItemIndex] = {\r\n                ...updatedCartItems[existingItemIndex],\r\n                quantity: updatedCartItems[existingItemIndex].quantity + 1,\r\n            };\r\n            //   console.log('cart',cartItems.length);\r\n            //    setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, add it\r\n            console.log(\"Dish does not exist in the cart.Adding to the cart.\");\r\n            console.log(\"cart\", cartItems.length);\r\n            //   setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems([...cartItems, { ...dish, quantity: 1 }]);\r\n        }\r\n        setTotalPrice((prev) => prev + dish.price);\r\n    };\r\n\r\n    const handleRemoveItems = (dish) => {\r\n        console.log(\"Dish ID to remove:\", dish);\r\n\r\n        // Check if the dish exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish exists, decrement the \r\n            // quantity or remove it from the cart\r\n            console.log(\r\n                \"Dish exists in the cart.\"\r\n            );\r\n\r\n            const updatedCartItems = [...cartItems];\r\n\r\n            if (updatedCartItems[existingItemIndex].quantity > 1) {\r\n                // If the quantity is greater than 1, decrement the quantity\r\n                updatedCartItems[existingItemIndex] = {\r\n                    ...updatedCartItems[existingItemIndex],\r\n                    quantity: updatedCartItems[existingItemIndex].quantity - 1,\r\n                };\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            } else {\r\n                // If the quantity is 1, remove the dish from the cart\r\n                updatedCartItems.splice(existingItemIndex, 1);\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            }\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, \r\n            // log a message or handle accordingly\r\n            console.log(\"Dish does not exist in the cart.\");\r\n        }\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        setCartItems([]);\r\n        setTotalPrice(0);\r\n    };\r\n    const value = {\r\n        restaurants,\r\n        selectedRestaurant,\r\n        setSelectedRestaurant,\r\n        handleAddItems,\r\n        handleRemoveItems,\r\n        totalPrice,\r\n        emptyCart,\r\n    };\r\n\r\n    return (\r\n        <RestaurantContext.Provider value={value}>\r\n            {children}\r\n        </RestaurantContext.Provider>\r\n    );\r\n};\r\n\r\nexport { RestaurantContext, RestaurantProvider };\r\n*/\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RestaurantContext = /*#__PURE__*/createContext();\nexport const RestaurantProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const addToCart = item => {\n    setCartItems(prev => [...prev, item]);\n    setTotalPrice(prev => prev + item.price * item.quantity);\n  };\n  const emptyCart = () => {\n    setCartItems([]);\n    setTotalPrice(0);\n  };\n  return /*#__PURE__*/_jsxDEV(RestaurantContext.Provider, {\n    value: {\n      cartItems,\n      totalPrice,\n      addToCart,\n      emptyCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n_s(RestaurantProvider, \"3soDIWFfjmjFeGPLfBKsUF7cHno=\");\n_c = RestaurantProvider;\nvar _c;\n$RefreshReg$(_c, \"RestaurantProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","RestaurantContext","RestaurantProvider","children","_s","cartItems","setCartItems","totalPrice","setTotalPrice","addToCart","item","prev","price","quantity","emptyCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/mern/food-del/client/src/contexts/RestaurantContext.js"],"sourcesContent":["//RestaurantContext.js\r\n\r\n/*import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst RestaurantContext = createContext();\r\n\r\nconst RestaurantProvider = ({ children }) => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [selectedRestaurant, setSelectedRestaurant] = useState(null);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurants = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    \"http://localhost:5000/restaurants\"\r\n                );\r\n                setRestaurants(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching restaurants:\", error.message);\r\n            }\r\n        };\r\n\r\n        fetchRestaurants();\r\n    }, []);\r\n\r\n    const handleAddItems = (dish) => {\r\n        console.log(\"Dish:\", dish);\r\n\r\n        // Check if the dish already exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish already exists, update \r\n            // the quantity or any other logic\r\n            console.log(\"Dish already exists in the cart.\");\r\n            // Example: Increment the quantity\r\n            const updatedCartItems = [...cartItems];\r\n            updatedCartItems[existingItemIndex] = {\r\n                ...updatedCartItems[existingItemIndex],\r\n                quantity: updatedCartItems[existingItemIndex].quantity + 1,\r\n            };\r\n            //   console.log('cart',cartItems.length);\r\n            //    setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, add it\r\n            console.log(\"Dish does not exist in the cart.Adding to the cart.\");\r\n            console.log(\"cart\", cartItems.length);\r\n            //   setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems([...cartItems, { ...dish, quantity: 1 }]);\r\n        }\r\n        setTotalPrice((prev) => prev + dish.price);\r\n    };\r\n\r\n    const handleRemoveItems = (dish) => {\r\n        console.log(\"Dish ID to remove:\", dish);\r\n\r\n        // Check if the dish exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish exists, decrement the \r\n            // quantity or remove it from the cart\r\n            console.log(\r\n                \"Dish exists in the cart.\"\r\n            );\r\n\r\n            const updatedCartItems = [...cartItems];\r\n\r\n            if (updatedCartItems[existingItemIndex].quantity > 1) {\r\n                // If the quantity is greater than 1, decrement the quantity\r\n                updatedCartItems[existingItemIndex] = {\r\n                    ...updatedCartItems[existingItemIndex],\r\n                    quantity: updatedCartItems[existingItemIndex].quantity - 1,\r\n                };\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            } else {\r\n                // If the quantity is 1, remove the dish from the cart\r\n                updatedCartItems.splice(existingItemIndex, 1);\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            }\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, \r\n            // log a message or handle accordingly\r\n            console.log(\"Dish does not exist in the cart.\");\r\n        }\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        setCartItems([]);\r\n        setTotalPrice(0);\r\n    };\r\n    const value = {\r\n        restaurants,\r\n        selectedRestaurant,\r\n        setSelectedRestaurant,\r\n        handleAddItems,\r\n        handleRemoveItems,\r\n        totalPrice,\r\n        emptyCart,\r\n    };\r\n\r\n    return (\r\n        <RestaurantContext.Provider value={value}>\r\n            {children}\r\n        </RestaurantContext.Provider>\r\n    );\r\n};\r\n\r\nexport { RestaurantContext, RestaurantProvider };\r\n*/\r\n\r\n\r\nimport React, { createContext, useState } from \"react\";\r\n\r\nexport const RestaurantContext = createContext();\r\n\r\nexport const RestaurantProvider = ({ children }) => {\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    const addToCart = (item) => {\r\n        setCartItems((prev) => [...prev, item]);\r\n        setTotalPrice((prev) => prev + item.price * item.quantity);\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        setCartItems([]);\r\n        setTotalPrice(0);\r\n    };\r\n\r\n    return (\r\n        <RestaurantContext.Provider\r\n            value={{\r\n                cartItems,\r\n                totalPrice,\r\n                addToCart,\r\n                emptyCart,\r\n            }}\r\n        >\r\n            {children}\r\n        </RestaurantContext.Provider>\r\n    );\r\n};\r\n"],"mappingsaAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,CAAC;AAEhD,OAAO,MAAMK,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAMW,SAAS,GAAIC,IAAI,IAAK;IACxBJ,YAAY,CAAEK,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,IAAI,CAAC,CAAC;IACvCF,aAAa,CAAEG,IAAI,IAAKA,IAAI,GAAGD,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACG,QAAQ,CAAC;EAC9D,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpBR,YAAY,CAAC,EAAE,CAAC;IAChBE,aAAa,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACIR,OAAA,CAACC,iBAAiB,CAACc,QAAQ;IACvBC,KAAK,EAAE;MACHX,SAAS;MACTE,UAAU;MACVE,SAAS;MACTK;IACJ,CAAE;IAAAX,QAAA,EAEDA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAErC,CAAC;AAAChB,EAAA,CA1BWF,kBAAkB;AAAAmB,EAAA,GAAlBnB,kBAAkB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}