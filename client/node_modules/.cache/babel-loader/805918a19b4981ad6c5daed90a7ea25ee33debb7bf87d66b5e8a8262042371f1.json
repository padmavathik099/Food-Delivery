{"ast":null,"code":"//RestaurantContext.js\n\n/*import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst RestaurantContext = createContext();\r\n\r\nconst RestaurantProvider = ({ children }) => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [selectedRestaurant, setSelectedRestaurant] = useState(null);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurants = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    \"http://localhost:5000/restaurants\"\r\n                );\r\n                setRestaurants(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching restaurants:\", error.message);\r\n            }\r\n        };\r\n\r\n        fetchRestaurants();\r\n    }, []);\r\n\r\n    const handleAddItems = (dish) => {\r\n        console.log(\"Dish:\", dish);\r\n\r\n        // Check if the dish already exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish already exists, update \r\n            // the quantity or any other logic\r\n            console.log(\"Dish already exists in the cart.\");\r\n            // Example: Increment the quantity\r\n            const updatedCartItems = [...cartItems];\r\n            updatedCartItems[existingItemIndex] = {\r\n                ...updatedCartItems[existingItemIndex],\r\n                quantity: updatedCartItems[existingItemIndex].quantity + 1,\r\n            };\r\n            //   console.log('cart',cartItems.length);\r\n            //    setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, add it\r\n            console.log(\"Dish does not exist in the cart.Adding to the cart.\");\r\n            console.log(\"cart\", cartItems.length);\r\n            //   setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems([...cartItems, { ...dish, quantity: 1 }]);\r\n        }\r\n        setTotalPrice((prev) => prev + dish.price);\r\n    };\r\n\r\n    const handleRemoveItems = (dish) => {\r\n        console.log(\"Dish ID to remove:\", dish);\r\n\r\n        // Check if the dish exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish exists, decrement the \r\n            // quantity or remove it from the cart\r\n            console.log(\r\n                \"Dish exists in the cart.\"\r\n            );\r\n\r\n            const updatedCartItems = [...cartItems];\r\n\r\n            if (updatedCartItems[existingItemIndex].quantity > 1) {\r\n                // If the quantity is greater than 1, decrement the quantity\r\n                updatedCartItems[existingItemIndex] = {\r\n                    ...updatedCartItems[existingItemIndex],\r\n                    quantity: updatedCartItems[existingItemIndex].quantity - 1,\r\n                };\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            } else {\r\n                // If the quantity is 1, remove the dish from the cart\r\n                updatedCartItems.splice(existingItemIndex, 1);\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            }\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, \r\n            // log a message or handle accordingly\r\n            console.log(\"Dish does not exist in the cart.\");\r\n        }\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        setCartItems([]);\r\n        setTotalPrice(0);\r\n    };\r\n    const value = {\r\n        restaurants,\r\n        selectedRestaurant,\r\n        setSelectedRestaurant,\r\n        handleAddItems,\r\n        handleRemoveItems,\r\n        totalPrice,\r\n        emptyCart,\r\n    };\r\n\r\n    return (\r\n        <RestaurantContext.Provider value={value}>\r\n            {children}\r\n        </RestaurantContext.Provider>\r\n    );\r\n};\r\n\r\nexport { RestaurantContext, RestaurantProvider };\r\n*/","map":{"version":3,"names":[],"sources":["E:/mern/food-del/client/src/contexts/RestaurantContext.js"],"sourcesContent":["//RestaurantContext.js\r\n\r\n/*import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst RestaurantContext = createContext();\r\n\r\nconst RestaurantProvider = ({ children }) => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [selectedRestaurant, setSelectedRestaurant] = useState(null);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurants = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    \"http://localhost:5000/restaurants\"\r\n                );\r\n                setRestaurants(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching restaurants:\", error.message);\r\n            }\r\n        };\r\n\r\n        fetchRestaurants();\r\n    }, []);\r\n\r\n    const handleAddItems = (dish) => {\r\n        console.log(\"Dish:\", dish);\r\n\r\n        // Check if the dish already exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish already exists, update \r\n            // the quantity or any other logic\r\n            console.log(\"Dish already exists in the cart.\");\r\n            // Example: Increment the quantity\r\n            const updatedCartItems = [...cartItems];\r\n            updatedCartItems[existingItemIndex] = {\r\n                ...updatedCartItems[existingItemIndex],\r\n                quantity: updatedCartItems[existingItemIndex].quantity + 1,\r\n            };\r\n            //   console.log('cart',cartItems.length);\r\n            //    setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, add it\r\n            console.log(\"Dish does not exist in the cart.Adding to the cart.\");\r\n            console.log(\"cart\", cartItems.length);\r\n            //   setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems([...cartItems, { ...dish, quantity: 1 }]);\r\n        }\r\n        setTotalPrice((prev) => prev + dish.price);\r\n    };\r\n\r\n    const handleRemoveItems = (dish) => {\r\n        console.log(\"Dish ID to remove:\", dish);\r\n\r\n        // Check if the dish exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish exists, decrement the \r\n            // quantity or remove it from the cart\r\n            console.log(\r\n                \"Dish exists in the cart.\"\r\n            );\r\n\r\n            const updatedCartItems = [...cartItems];\r\n\r\n            if (updatedCartItems[existingItemIndex].quantity > 1) {\r\n                // If the quantity is greater than 1, decrement the quantity\r\n                updatedCartItems[existingItemIndex] = {\r\n                    ...updatedCartItems[existingItemIndex],\r\n                    quantity: updatedCartItems[existingItemIndex].quantity - 1,\r\n                };\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            } else {\r\n                // If the quantity is 1, remove the dish from the cart\r\n                updatedCartItems.splice(existingItemIndex, 1);\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            }\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, \r\n            // log a message or handle accordingly\r\n            console.log(\"Dish does not exist in the cart.\");\r\n        }\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        setCartItems([]);\r\n        setTotalPrice(0);\r\n    };\r\n    const value = {\r\n        restaurants,\r\n        selectedRestaurant,\r\n        setSelectedRestaurant,\r\n        handleAddItems,\r\n        handleRemoveItems,\r\n        totalPrice,\r\n        emptyCart,\r\n    };\r\n\r\n    return (\r\n        <RestaurantContext.Provider value={value}>\r\n            {children}\r\n        </RestaurantContext.Provider>\r\n    );\r\n};\r\n\r\nexport { RestaurantContext, RestaurantProvider };\r\n*/\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}