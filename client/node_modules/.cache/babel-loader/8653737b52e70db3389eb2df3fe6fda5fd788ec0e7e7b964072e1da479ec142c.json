{"ast":null,"code":"var _jsxFileName = \"E:\\\\mern\\\\food-del\\\\client\\\\src\\\\contexts\\\\RestaurantContext.js\",\n  _s = $RefreshSig$();\n//RestaurantContext.js\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RestaurantContext = /*#__PURE__*/createContext();\nconst RestaurantProvider = ({\n  children\n}) => {\n  _s();\n  const [restaurants, setRestaurants] = useState([]);\n  const [selectedRestaurant, setSelectedRestaurant] = useState(null);\n  const [cartItems, setCartItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  useEffect(() => {\n    const fetchRestaurants = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/restaurants\");\n        setRestaurants(response.data);\n      } catch (error) {\n        console.error(\"Error fetching restaurants:\", error.message);\n      }\n    };\n    fetchRestaurants();\n  }, []);\n  const handleAddItems = dish => {\n    console.log(\"Dish:\", dish);\n\n    // Check if the dish already exists in the cart\n    const existingItemIndex = cartItems.findIndex(item => item._id === dish._id);\n    if (existingItemIndex !== -1) {\n      // If the dish already exists, update \n      // the quantity or any other logic\n      console.log(\"Dish already exists in the cart.\");\n      // Example: Increment the quantity\n      const updatedCartItems = [...cartItems];\n      updatedCartItems[existingItemIndex] = {\n        ...updatedCartItems[existingItemIndex],\n        quantity: updatedCartItems[existingItemIndex].quantity + 1\n      };\n      //   console.log('cart',cartItems.length);\n      //    setTotalPrice(prev=>prev-dish.price)\n\n      setCartItems(updatedCartItems);\n    } else {\n      // If the dish is not in the cart, add it\n      console.log(\"Dish does not exist in the cart.Adding to the cart.\");\n      console.log(\"cart\", cartItems.length);\n      //   setTotalPrice(prev=>prev-dish.price)\n\n      setCartItems([...cartItems, {\n        ...dish,\n        quantity: 1\n      }]);\n    }\n    setTotalPrice(prev => prev + dish.price);\n  };\n  const handleRemoveItems = dish => {\n    console.log(\"Dish ID to remove:\", dish);\n\n    // Check if the dish exists in the cart\n    const existingItemIndex = cartItems.findIndex(item => item._id === dish._id);\n    if (existingItemIndex !== -1) {\n      // If the dish exists, decrement the \n      // quantity or remove it from the cart\n      console.log(\"Dish exists in the cart.\");\n      const updatedCartItems = [...cartItems];\n      if (updatedCartItems[existingItemIndex].quantity > 1) {\n        // If the quantity is greater than 1, decrement the quantity\n        updatedCartItems[existingItemIndex] = {\n          ...updatedCartItems[existingItemIndex],\n          quantity: updatedCartItems[existingItemIndex].quantity - 1\n        };\n        setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\n      } else {\n        // If the quantity is 1, remove the dish from the cart\n        updatedCartItems.splice(existingItemIndex, 1);\n        setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\n      }\n      setCartItems(updatedCartItems);\n    } else {\n      // If the dish is not in the cart, \n      // log a message or handle accordingly\n      console.log(\"Dish does not exist in the cart.\");\n    }\n  };\n  const emptyCart = () => {\n    setCartItems([]);\n    setTotalPrice(0);\n  };\n  const value = {\n    restaurants,\n    selectedRestaurant,\n    setSelectedRestaurant,\n    handleAddItems,\n    handleRemoveItems,\n    totalPrice,\n    emptyCart\n  };\n  return /*#__PURE__*/_jsxDEV(RestaurantContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(RestaurantProvider, \"+ezkgt5Rx5yW6+kxPfEjmOCHXbQ=\");\n_c = RestaurantProvider;\nexport { RestaurantContext, RestaurantProvider };\nvar _c;\n$RefreshReg$(_c, \"RestaurantProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","RestaurantContext","RestaurantProvider","children","_s","restaurants","setRestaurants","selectedRestaurant","setSelectedRestaurant","cartItems","setCartItems","totalPrice","setTotalPrice","fetchRestaurants","response","get","data","error","console","message","handleAddItems","dish","log","existingItemIndex","findIndex","item","_id","updatedCartItems","quantity","length","prev","price","handleRemoveItems","splice","emptyCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/mern/food-del/client/src/contexts/RestaurantContext.js"],"sourcesContent":["//RestaurantContext.js\r\n\r\nimport React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst RestaurantContext = createContext();\r\n\r\nconst RestaurantProvider = ({ children }) => {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [selectedRestaurant, setSelectedRestaurant] = useState(null);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurants = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    \"http://localhost:5000/restaurants\"\r\n                );\r\n                setRestaurants(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching restaurants:\", error.message);\r\n            }\r\n        };\r\n\r\n        fetchRestaurants();\r\n    }, []);\r\n\r\n    const handleAddItems = (dish) => {\r\n        console.log(\"Dish:\", dish);\r\n\r\n        // Check if the dish already exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish already exists, update \r\n            // the quantity or any other logic\r\n            console.log(\"Dish already exists in the cart.\");\r\n            // Example: Increment the quantity\r\n            const updatedCartItems = [...cartItems];\r\n            updatedCartItems[existingItemIndex] = {\r\n                ...updatedCartItems[existingItemIndex],\r\n                quantity: updatedCartItems[existingItemIndex].quantity + 1,\r\n            };\r\n            //   console.log('cart',cartItems.length);\r\n            //    setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, add it\r\n            console.log(\"Dish does not exist in the cart.Adding to the cart.\");\r\n            console.log(\"cart\", cartItems.length);\r\n            //   setTotalPrice(prev=>prev-dish.price)\r\n\r\n            setCartItems([...cartItems, { ...dish, quantity: 1 }]);\r\n        }\r\n        setTotalPrice((prev) => prev + dish.price);\r\n    };\r\n\r\n    const handleRemoveItems = (dish) => {\r\n        console.log(\"Dish ID to remove:\", dish);\r\n\r\n        // Check if the dish exists in the cart\r\n        const existingItemIndex = cartItems.findIndex(\r\n            (item) => item._id === dish._id\r\n        );\r\n\r\n        if (existingItemIndex !== -1) {\r\n            // If the dish exists, decrement the \r\n            // quantity or remove it from the cart\r\n            console.log(\r\n                \"Dish exists in the cart.\"\r\n            );\r\n\r\n            const updatedCartItems = [...cartItems];\r\n\r\n            if (updatedCartItems[existingItemIndex].quantity > 1) {\r\n                // If the quantity is greater than 1, decrement the quantity\r\n                updatedCartItems[existingItemIndex] = {\r\n                    ...updatedCartItems[existingItemIndex],\r\n                    quantity: updatedCartItems[existingItemIndex].quantity - 1,\r\n                };\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            } else {\r\n                // If the quantity is 1, remove the dish from the cart\r\n                updatedCartItems.splice(existingItemIndex, 1);\r\n                setTotalPrice(totalPrice - cartItems[existingItemIndex].price);\r\n            }\r\n\r\n            setCartItems(updatedCartItems);\r\n        } else {\r\n            // If the dish is not in the cart, \r\n            // log a message or handle accordingly\r\n            console.log(\"Dish does not exist in the cart.\");\r\n        }\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        setCartItems([]);\r\n        setTotalPrice(0);\r\n    };\r\n    const value = {\r\n        restaurants,\r\n        selectedRestaurant,\r\n        setSelectedRestaurant,\r\n        handleAddItems,\r\n        handleRemoveItems,\r\n        totalPrice,\r\n        emptyCart,\r\n    };\r\n\r\n    return (\r\n        <RestaurantContext.Provider value={value}>\r\n            {children}\r\n        </RestaurantContext.Provider>\r\n    );\r\n};\r\n\r\nexport { RestaurantContext, RestaurantProvider };\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}